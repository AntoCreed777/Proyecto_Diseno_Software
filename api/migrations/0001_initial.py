# Generated by Django 5.2.1 on 2025-07-03 01:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Vehiculo',
            fields=[
                ('matricula', models.CharField(help_text='Matrícula única del vehículo', max_length=50, primary_key=True, serialize=False)),
                ('marca', models.CharField(help_text='Marca del vehículo', max_length=100)),
                ('año_de_fabricacion', models.PositiveIntegerField(help_text='Año de fabricación del vehículo')),
            ],
            options={
                'verbose_name': 'Vehículo',
                'verbose_name_plural': 'Vehículos',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('rol', models.CharField(choices=[('cliente', 'Cliente'), ('conductor', 'Conductor'), ('despachador', 'Despachador'), ('admin', 'Admin')], help_text='Rol del usuario en el sistema', max_length=100)),
                ('telefono', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Número de teléfono del usuario', max_length=128, null=True, region=None)),
                ('fecha_registro', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de registro del usuario')),
                ('fecha_ultima_modificacion', models.DateTimeField(auto_now=True, help_text='Fecha y hora de la última modificación')),
                ('email_verified', models.BooleanField(default=False, help_text='Indica si el correo electrónico ha sido verificado', verbose_name='Correo verificado')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nivel_acceso', models.IntegerField(default=1, help_text='Nivel de acceso del administrador (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('usuario', models.OneToOneField(help_text='Usuario asociado al administrador', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direccion_hogar', models.CharField(blank=True, help_text='Dirección del hogar del cliente', max_length=255, null=True)),
                ('usuario', models.OneToOneField(help_text='Usuario asociado al cliente', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Conductor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(choices=[('en_ruta', 'En ruta'), ('disponible', 'Disponible'), ('no disponible', 'No disponible')], default='disponible', help_text='Estado actual del conductor', max_length=100)),
                ('usuario', models.OneToOneField(help_text='Usuario asociado al conductor', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vehiculo', models.ForeignKey(blank=True, help_text='Vehículo asignado al conductor', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.vehiculo')),
            ],
        ),
        migrations.CreateModel(
            name='Despachador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usuario', models.OneToOneField(help_text='Usuario asociado al despachador', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Paquete',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('largo', models.FloatField(help_text='Largo del paquete en centímetros', validators=[django.core.validators.MinValueValidator(0.01, 'El valor debe ser mayor a 0.')])),
                ('ancho', models.FloatField(help_text='Ancho del paquete en centímetros', validators=[django.core.validators.MinValueValidator(0.01, 'El valor debe ser mayor a 0.')])),
                ('alto', models.FloatField(help_text='Alto del paquete en centímetros', validators=[django.core.validators.MinValueValidator(0.01, 'El valor debe ser mayor a 0.')])),
                ('peso', models.FloatField(help_text='Peso del paquete en kilogramos', validators=[django.core.validators.MinValueValidator(0.01, 'El valor debe ser mayor a 0.')])),
                ('fecha_registro', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de registro del paquete')),
                ('fecha_entrega', models.DateTimeField(blank=True, help_text='Fecha y hora de entrega del paquete', null=True)),
                ('estado', models.CharField(choices=[('en_bodega', 'En bodega'), ('en_ruta', 'En ruta'), ('entregado', 'Entregado')], default='en_bodega', help_text='Estado actual del paquete', max_length=10)),
                ('ubicacion_actual_lat', models.FloatField(default=-36.8302049, help_text='Latitud de la ubicación actual')),
                ('ubicacion_actual_lng', models.FloatField(default=-73.0372293, help_text='Longitud de la ubicación actual')),
                ('ubicacion_actual_texto', models.CharField(default='Universidad de Concepcion, Concepcion, Bio Bio, Chile', help_text='Descripción textual de la ubicación actual', max_length=200)),
                ('direccion_envio_lat', models.FloatField(help_text='Latitud de la dirección de envío')),
                ('direccion_envio_lng', models.FloatField(help_text='Longitud de la dirección de envío')),
                ('direccion_envio_texto', models.CharField(help_text='Descripción textual de la dirección de envío', max_length=200)),
                ('nombre_destinatario', models.CharField(help_text='Nombre completo del destinatario', max_length=255)),
                ('rut_destinatario', models.CharField(help_text='RUT del destinatario', max_length=20)),
                ('telefono_destinatario', phonenumber_field.modelfields.PhoneNumberField(help_text='Teléfono de contacto del destinatario', max_length=128, region=None)),
                ('cliente', models.ForeignKey(help_text='Cliente que envía el paquete', on_delete=django.db.models.deletion.CASCADE, related_name='paquetes', to='api.cliente')),
                ('conductor', models.ForeignKey(blank=True, help_text='Conductor asignado para la entrega', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='paquetes', to='api.conductor')),
                ('despachador', models.ForeignKey(blank=True, help_text='Despachador que gestionó el paquete', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='paquetes', to='api.despachador')),
            ],
            options={
                'verbose_name': 'Paquete',
                'verbose_name_plural': 'Paquetes',
            },
        ),
        migrations.CreateModel(
            name='Notificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mensaje', models.TextField(help_text='Contenido del mensaje de la notificación')),
                ('fecha_envio', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de envío de la notificación')),
                ('cliente', models.ForeignKey(help_text='Cliente que recibe la notificación', on_delete=django.db.models.deletion.CASCADE, related_name='notificaciones', to='api.cliente')),
                ('paquete', models.ForeignKey(blank=True, help_text='Paquete relacionado con la notificación', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notificaciones', to='api.paquete')),
            ],
            options={
                'verbose_name': 'Notificación',
                'verbose_name_plural': 'Notificaciones',
                'ordering': ['-fecha_envio'],
            },
        ),
        migrations.CreateModel(
            name='Ruta',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tipo_ruta', models.CharField(choices=[('ida', 'Ruta de Ida'), ('regreso', 'Ruta de Regreso'), ('completa', 'Ruta Completa (Ida y Regreso)')], default='completa', max_length=10)),
                ('ruta_ida_coordenadas', models.JSONField(help_text='Coordenadas de la ruta de ida como lista de [lat, lng]')),
                ('ruta_ida_polyline', models.TextField(help_text='Polyline codificado de la ruta de ida')),
                ('distancia_ida_km', models.FloatField(help_text='Distancia de la ruta de ida en kilómetros')),
                ('duracion_ida_minutos', models.PositiveIntegerField(help_text='Duración estimada de la ruta de ida en minutos')),
                ('ruta_regreso_coordenadas', models.JSONField(help_text='Coordenadas de la ruta de regreso como lista de [lat, lng]')),
                ('ruta_regreso_polyline', models.TextField(help_text='Polyline codificado de la ruta de regreso')),
                ('distancia_regreso_km', models.FloatField(help_text='Distancia de la ruta de regreso en kilómetros')),
                ('duracion_regreso_minutos', models.PositiveIntegerField(help_text='Duración estimada de la ruta de regreso en minutos')),
                ('distancia_total_km', models.FloatField(help_text='Distancia total (ida + regreso) en kilómetros')),
                ('duracion_total_minutos', models.PositiveIntegerField(help_text='Duración total estimada (ida + regreso) en minutos')),
                ('fecha_calculo', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora cuando se calculó la ruta')),
                ('origen_direccion', models.CharField(help_text='Dirección de origen (Universidad)', max_length=500)),
                ('destino_direccion', models.CharField(help_text='Dirección de destino del paquete', max_length=500)),
                ('origen_lat', models.FloatField(help_text='Latitud del punto de origen')),
                ('origen_lng', models.FloatField(help_text='Longitud del punto de origen')),
                ('destino_lat', models.FloatField(help_text='Latitud del punto de destino')),
                ('destino_lng', models.FloatField(help_text='Longitud del punto de destino')),
                ('fecha_inicio_ruta', models.DateTimeField(blank=True, help_text='Fecha y hora cuando el conductor inició la ruta', null=True)),
                ('fecha_fin_ruta', models.DateTimeField(blank=True, help_text='Fecha y hora cuando el conductor completó la ruta', null=True)),
                ('paquete', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ruta', to='api.paquete')),
            ],
            options={
                'verbose_name': 'Ruta',
                'verbose_name_plural': 'Rutas',
            },
        ),
    ]
